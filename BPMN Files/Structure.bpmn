<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/test">
  <process id="dgcStructure" name="DGCStructure" isExecutable="true">
    <documentation>This is a sample dgc structure workflow</documentation>
    <scriptTask id="createStructure" name="Create Structure" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script><![CDATA[import com.collibra.dgc.core.api.dto.instance.community.AddCommunityRequest
import com.collibra.dgc.core.api.dto.instance.asset.AddAssetRequest;
import com.collibra.dgc.core.api.dto.instance.attribute.AddAttributeRequest;
import com.collibra.dgc.core.api.dto.instance.relation.AddRelationRequest;
import com.collibra.dgc.core.api.dto.instance.domain.AddDomainRequest;
import com.collibra.dgc.core.api.dto.instance.community.FindCommunitiesRequest;
import com.collibra.dgc.core.api.dto.MatchMode
import com.collibra.dgc.core.api.dto.meta.assettype.FindAssetTypesRequest;
import com.collibra.dgc.core.api.dto.meta.domaintype.FindDomainTypesRequest;
import com.collibra.dgc.core.api.dto.meta.attributetype.FindAttributeTypesRequest;
import com.collibra.dgc.core.api.dto.meta.relationtype.FindRelationTypesRequest

def communityList = communityApi.findCommunities(FindCommunitiesRequest.builder()
  .name(communityName)
  .build()).getResults()

if(!communityList.isEmpty()){
  def removeCom = communityApi.removeCommunityInJob(communityList.get(0).getId())
}


def SqlCommunityUuid = communityApi.addCommunity(AddCommunityRequest.builder()
    .name(communityName)
    .description("BS SQL Community")
    .build()).getId()

def communityList1 = communityApi.findCommunities(FindCommunitiesRequest.builder()
  .name(communityName)
  .build()).getResults()

def getDomainTypeIdByName(String type){
  def domainTypeList = domainTypeApi.findDomainTypes(FindDomainTypesRequest.builder()
  .name(type)
  .nameMatchMode(MatchMode.EXACT) 
  .build()).getResults()

  return domainTypeList.get(0).getId()
}


def techDomainUuid = domainApi.addDomain(AddDomainRequest.builder()
        .name(technologyAssetDomainName)
        .communityId(SqlCommunityUuid)
        .typeId(getDomainTypeIdByName(technologyAssetDomainId))
        .build()).getId()

def physicalDomainUuid = domainApi.addDomain(AddDomainRequest.builder()
    .name(physicalDataDictDomainName)
        .communityId(SqlCommunityUuid)
    .typeId(getDomainTypeIdByName(physicalDataDictDomainId))
        .build()).getId()



def getAssetIdByName(String type){
  def assetList = assetTypeApi.findAssetTypes(FindAssetTypesRequest.builder()
  .name(type)
  .nameMatchMode(MatchMode.EXACT) 
  .build()).getResults()

  return assetList.get(0).getId()
}

def newServerAssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name(serverName)
           .displayName(serverName)
           .typeId(getAssetIdByName(serverTypeId))
           .domainId(techDomainUuid)
           .build()).getId()




def newDbAssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name(databaseName)
           .displayName(databaseName)
           .typeId(getAssetIdByName(databaseTypeId))
           .domainId(techDomainUuid)
           .build()).getId()

def cassetList = assetTypeApi.findAssetTypes(FindAssetTypesRequest.builder()
  .name(cloudTypeId)
  .build()).getResults()


def newCloudAssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name(cloudName)
           .displayName(cloudName)
           .typeId(cassetList.get(0).getId())
           .domainId(techDomainUuid)
           .build()).getId()


def newSchemaAssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name(schemaName)
           .displayName(schemaName)
           .typeId(getAssetIdByName(schemaTypeId))
           .domainId(physicalDomainUuid)
           .build()).getId()

def newTable1AssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name("Book Price")
           .displayName("Book Price")
           .typeId(getAssetIdByName(tableTypeId))
           .domainId(physicalDomainUuid)
           .build()).getId()

def newTable2AssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name("Author Details")
           .displayName("Author Details")
           .typeId(getAssetIdByName(tableTypeId))
           .domainId(physicalDomainUuid)
           .build()).getId()

def newTable3AssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name("Publisher Details")
           .displayName("Publisher Details")
           .typeId(getAssetIdByName(tableTypeId))
           .domainId(physicalDomainUuid)
           .build()).getId()


def newColumn1AssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name("BookId")
           .displayName("BookId")
           .typeId(getAssetIdByName(columnTypeId))
           .domainId(physicalDomainUuid)
           .build()).getId()

def newColumn2AssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name("BookName")
           .displayName("BookName")
           .typeId(getAssetIdByName(columnTypeId))
           .domainId(physicalDomainUuid)
           .build()).getId()

def newColumn3AssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name("BookPrice")
           .displayName("BookPrice")
           .typeId(getAssetIdByName(columnTypeId))
           .domainId(physicalDomainUuid)
           .build()).getId()

def newColumn4AssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name("Author")
           .displayName("Author")
           .typeId(getAssetIdByName(columnTypeId))
           .domainId(physicalDomainUuid)
           .build()).getId()

def newColumn5AssetUuid = assetApi.addAsset(AddAssetRequest.builder()
           .name("Publisher")
           .displayName("Publisher")
           .typeId(getAssetIdByName(columnTypeId))
           .domainId(physicalDomainUuid)
           .build()).getId()


def getAttributeTypeIdByName(String type){
  def attrTypeList = attributeTypeApi.findAttributeTypes(FindAttributeTypesRequest.builder()
  .name(type)
  .nameMatchMode(MatchMode.EXACT) 
  .build()).getResults()

  return attrTypeList.get(0).getId()
}

def getCustomAttributeTypeIdByName(String type){
  def cusAttrTypeList = attributeTypeApi.findAttributeTypes(FindAttributeTypesRequest.builder()
  .name(type)
  .build()).getResults()

  return cusAttrTypeList.get(0).getId()
}

addCustomAttribute(newDbAssetUuid,pocNameCusAttr,"Sample SQL Structure")
addCustomAttribute(newDbAssetUuid,databaseTypeCusAttr,"SQL")

def addCustomAttribute(assetId,typeId,value){
  attributeApi.addAttribute(AddAttributeRequest.builder()
 .assetId(assetId)
 .typeId(getCustomAttributeTypeIdByName(typeId))
 .value(value)
 .build())  
}

def addAttribute(assetId,typeId,value){
  attributeApi.addAttribute(AddAttributeRequest.builder()
 .assetId(assetId)
 .typeId(getAttributeTypeIdByName(typeId))
 .value(value)
 .build())  
}


// def getCustomRelationTypeIdByName(relationDetails){
//   def cusrelList=relationDetails.split(',')
//   def cusRelationTypeList = relationTypeApi.findRelationTypes(FindRelationTypesRequest.builder()
//   .sourceTypeName(cusrelList[0])
//   .targetTypeName(cusrelList[1])
//   .role(cusrelList[2])
//   .coRole(cusrelList[3])
//   .build()).getResults()

//   return cusRelationTypeList.get(0).getId()
// }

def getRelationTypeIdByName(relationDetails){
  def relList=relationDetails.split(',')
  def relationTypeList = relationTypeApi.findRelationTypes(FindRelationTypesRequest.builder()
  .sourceTypeName(relList[0])
  .targetTypeName(relList[1])
  .role(relList[2])
  .coRole(relList[3])
  .build()).getResults()

  return relationTypeList.get(0).getId()
}


addRelation(newServerAssetUuid,newCloudAssetUuid,getRelationTypeIdByName(serverCloudRelation))
addRelation(newServerAssetUuid,newDbAssetUuid,getRelationTypeIdByName(serverDatabaseRelation))
addRelation(newDbAssetUuid,newSchemaAssetUuid,getRelationTypeIdByName(databaseSchemaRelation))

addRelation(newSchemaAssetUuid,newTable1AssetUuid,getRelationTypeIdByName(schemaTableRelation))
addRelation(newSchemaAssetUuid,newTable2AssetUuid,getRelationTypeIdByName(schemaTableRelation))
addRelation(newSchemaAssetUuid,newTable3AssetUuid,getRelationTypeIdByName(schemaTableRelation))

addRelation(newTable1AssetUuid,newColumn1AssetUuid,getRelationTypeIdByName(tableColumnRelation))
addRelation(newTable1AssetUuid,newColumn2AssetUuid,getRelationTypeIdByName(tableColumnRelation))
addRelation(newTable1AssetUuid,newColumn3AssetUuid,getRelationTypeIdByName(tableColumnRelation))
addRelation(newTable2AssetUuid,newColumn1AssetUuid,getRelationTypeIdByName(tableColumnRelation))
addRelation(newTable2AssetUuid,newColumn2AssetUuid,getRelationTypeIdByName(tableColumnRelation))
addRelation(newTable2AssetUuid,newColumn4AssetUuid,getRelationTypeIdByName(tableColumnRelation))
addRelation(newTable3AssetUuid,newColumn1AssetUuid,getRelationTypeIdByName(tableColumnRelation))
addRelation(newTable3AssetUuid,newColumn2AssetUuid,getRelationTypeIdByName(tableColumnRelation))
addRelation(newTable3AssetUuid,newColumn5AssetUuid,getRelationTypeIdByName(tableColumnRelation))

def addRelation(sourceId,targetId,typeId){
  relationApi.addRelation(AddRelationRequest.builder()
 .sourceId(sourceId)
 .targetId(targetId)
 .typeId(typeId)
 .build())  
}

// def addCustomRelation(sourceId,targetId,typeId){
//   relationApi.addRelation(AddRelationRequest.builder()
//  .sourceId(sourceId)
//  .targetId(targetId)
//  .typeId(typeId)
//  .build())  
// }]]></script>
    </scriptTask>
    <endEvent id="endevent1" name="End"></endEvent>
    <sequenceFlow id="flow1" sourceRef="createStructure" targetRef="endevent1"></sequenceFlow>
    <startEvent id="startevent1" name="Start">
      <extensionElements>
        <activiti:formProperty id="communityName" name="communityName" type="string" default="BS Sql Server" readable="false"></activiti:formProperty>
        <activiti:formProperty id="databaseName" name="databaseName" type="string" default="Database" readable="false"></activiti:formProperty>
        <activiti:formProperty id="serverName" name="serverName" type="string" default="Server" readable="false"></activiti:formProperty>
        <activiti:formProperty id="technologyAssetDomainName" name="technologyAssetDomainName" type="string" default="BS Tech Domain" readable="false"></activiti:formProperty>
        <activiti:formProperty id="physicalDataDictDomainName" name="physicalDataDictDomainName" type="string" default="BS Dictionary" readable="false"></activiti:formProperty>
        <activiti:formProperty id="schemaName" name="schemaName" type="string" default="Schema" readable="false"></activiti:formProperty>
        <activiti:formProperty id="databaseTypeCusAttr" name="databaseTypeCusAttr" type="string" default="Database Type" readable="false"></activiti:formProperty>
        <activiti:formProperty id="pocNameCusAttr" name="pocNameCusAttr" type="string" default="POC Name" readable="false"></activiti:formProperty>
        <activiti:formProperty id="physicalDataDictDomainId" name="physicalDataDictDomainId" type="string" default="Physical Data Dictionary" readable="false"></activiti:formProperty>
        <activiti:formProperty id="serverTypeId" name="serverTypeId" type="string" default="Server" readable="false"></activiti:formProperty>
        <activiti:formProperty id="databaseTypeId" name="databaseTypeId" type="string" default="Database" readable="false"></activiti:formProperty>
        <activiti:formProperty id="schemaTypeId" name="schemaTypeId" type="string" default="Schema" readable="false"></activiti:formProperty>
        <activiti:formProperty id="tableTypeId" name="tableTypeId" type="string" default="Table" readable="false"></activiti:formProperty>
        <activiti:formProperty id="columnTypeId" name="columnTypeId" type="string" default="Column" readable="false"></activiti:formProperty>
        <activiti:formProperty id="cloudName" name="cloudName" type="string" default="Cloud Storage" readable="false"></activiti:formProperty>
        <activiti:formProperty id="cloudTypeId" name="cloudTypeId" type="string" default="Cloud" readable="false"></activiti:formProperty>
        <activiti:formProperty id="technologyAssetDomainId" name="technologyAssetDomainId" type="string" default="Technology Asset Domain" readable="false"></activiti:formProperty>
        <activiti:formProperty id="databaseSchemaRelation" name="Database to Schema Relation" type="string" default="Database,Schema,contains,contained in" readable="false"></activiti:formProperty>
        <activiti:formProperty id="serverDatabaseRelation" name="Server to Database Relation" type="string" default="Server,Database,contains,contained in" readable="false"></activiti:formProperty>
        <activiti:formProperty id="serverCloudRelation" name="Server to Cloud Relation" type="string" default="Server,Cloud,uses,used By" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="tableColumnRelation" name="Table to Column Relation" type="string" default="Table,Column,contains,is a part of" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="schemaTableRelation" name="Schema to Table Relation" type="string" default="Schema,Table,contains,is part of" readable="false" required="true"></activiti:formProperty>
      </extensionElements>
    </startEvent>
    <sequenceFlow id="flow2" sourceRef="startevent1" targetRef="createStructure"></sequenceFlow>
  </process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_dgcStructure">
    <bpmndi:BPMNPlane bpmnElement="dgcStructure" id="BPMNPlane_dgcStructure">
      <bpmndi:BPMNShape bpmnElement="createStructure" id="BPMNShape_createStructure">
        <omgdc:Bounds height="55.0" width="105.0" x="480.0" y="297.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="endevent1" id="BPMNShape_endevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="890.0" y="310.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="startevent1" id="BPMNShape_startevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="270.0" y="307.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge bpmnElement="flow1" id="BPMNEdge_flow1">
        <omgdi:waypoint x="585.0" y="324.0"></omgdi:waypoint>
        <omgdi:waypoint x="890.0" y="327.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow2" id="BPMNEdge_flow2">
        <omgdi:waypoint x="305.0" y="324.0"></omgdi:waypoint>
        <omgdi:waypoint x="480.0" y="324.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</definitions>